/**
 * üîê SERVI√áO DE AUTENTICA√á√ÉO - Authentication Service
 *
 * FUN√á√ÉO: Gerenciar autentica√ß√£o de usu√°rios com Supabase Auth.
 *
 * RESPONSABILIDADES:
 * - Registrar usu√°rios antigos no Supabase Auth
 * - Fazer login com email/senha
 * - Gerenciar sess√µes de usu√°rio
 * - Sincronizar dados entre Auth e tabela usuarios
 * - Migrar usu√°rios existentes para o sistema de auth
 *
 * FUNCIONALIDADES:
 * - signUp(): Cadastrar novo usu√°rio com auth
 * - signIn(): Login com email/senha
 * - signOut(): Logout do usu√°rio
 * - migrateExistingUser(): Migrar usu√°rio antigo
 * - getCurrentUser(): Obter usu√°rio logado
 */

import { query, update, getSupabaseClient } from './supabaseService.js';

/**
 * Fazer login com email e senha
 */
export async function signIn(email, password) {
  console.log('[authService] üîê Tentando login para:', email);

  try {
    const client = window.supabaseClient || window.supabase;
    if (!client || !client.auth) {
      throw new Error('Cliente Supabase n√£o inicializado');
    }
    
    const { data, error } = await client.auth.signInWithPassword({
      email: email,
      password: password,
    });

    if (error) {
      console.error('[authService] ‚ùå Erro no login:', error);
      throw error;
    }

    console.log('[authService] ‚úÖ Login realizado com sucesso');

    // Buscar dados completos do usu√°rio na tabela usuarios
    const { data: userData } = await query('usuarios', {
      eq: { auth_uuid: data.user.id },
      limit: 1,
    });

    if (userData && userData.length > 0) {
      const usuario = userData[0];
      console.log('[authService] üë§ Usu√°rio encontrado:', usuario.nome);

      // Retornar dados completos
      return {
        user: data.user,
        session: data.session,
        userData: usuario,
      };
    } else {
      console.warn('[authService] ‚ö†Ô∏è Usu√°rio autenticado mas n√£o encontrado na tabela usuarios');
      return {
        user: data.user,
        session: data.session,
        userData: null,
      };
    }
  } catch (error) {
    console.error('[authService] ‚ùå Erro no login:', error);
    throw error;
  }
}

/**
 * Cadastrar novo usu√°rio com autentica√ß√£o
 */
export async function signUp(email, password, userData) {
  console.log('[authService] üÜï Cadastrando usu√°rio:', email);

  try {
    const client = window.supabaseClient || window.supabase;
    if (!client || !client.auth) {
      throw new Error('Cliente Supabase n√£o inicializado');
    }
    
    // 1. Criar usu√°rio no Supabase Auth
    const { data, error } = await client.auth.signUp({
      email: email,
      password: password,
      options: {
        data: {
          name: userData.nome,
        },
      },
    });

    if (error) {
      console.error('[authService] ‚ùå Erro no cadastro auth:', error);
      throw error;
    }

    console.log('[authService] ‚úÖ Usu√°rio criado no Auth:', data.user.id);

    // 2. Atualizar/criar registro na tabela usuarios com auth_uuid
    const usuarioData = {
      ...userData,
      auth_uuid: data.user.id,
      email: email,
      status: 'ativo',
    };

    // Se j√° existe um usu√°rio com este email, atualizar
    const { data: existingUser } = await query('usuarios', {
      eq: { email: email },
      limit: 1,
    });

    let finalUser;
    if (existingUser && existingUser.length > 0) {
      // Atualizar usu√°rio existente
      const { data: updatedUser } = await update(
        'usuarios',
        { auth_uuid: data.user.id },
        { eq: { email: email } }
      );
      finalUser = updatedUser[0];
      console.log('[authService] üîÑ Usu√°rio existente atualizado com auth_uuid');
    } else {
      // Criar novo usu√°rio
      const { insert } = await import('./supabaseService.js');
      const { data: newUser } = await insert('usuarios', usuarioData);
      finalUser = newUser[0];
      console.log('[authService] üë§ Novo usu√°rio criado na tabela');
    }

    return {
      user: data.user,
      session: data.session,
      userData: finalUser,
    };
  } catch (error) {
    console.error('[authService] ‚ùå Erro no cadastro:', error);
    throw error;
  }
}

/**
 * Fazer logout
 */
export async function signOut() {
  console.log('[authService] üö™ Fazendo logout...');

  try {
    const client = window.supabaseClient || window.supabase;
    if (!client || !client.auth) {
      throw new Error('Cliente Supabase n√£o inicializado');
    }
    
    const { error } = await client.auth.signOut();

    if (error) {
      console.error('[authService] ‚ùå Erro no logout:', error);
      throw error;
    }

    console.log('[authService] ‚úÖ Logout realizado com sucesso');

    // Limpar estado local
    if (window.AppState) {
      window.AppState.set('currentUser', null);
      window.AppState.set('session', null);
    }
  } catch (error) {
    console.error('[authService] ‚ùå Erro no logout:', error);
    throw error;
  }
}

/**
 * Obter usu√°rio atual logado
 */
export async function getCurrentUser() {
  try {
    const client = window.supabaseClient || window.supabase;
    if (!client || !client.auth) {
      return null;
    }
    
    const {
      data: { user },
    } = await client.auth.getUser();

    if (!user) {
      return null;
    }

    // Buscar dados completos na tabela usuarios
    const { data: userData } = await query('usuarios', {
      eq: { auth_uuid: user.id },
      limit: 1,
    });

    return {
      user: user,
      userData: userData && userData.length > 0 ? userData[0] : null,
    };
  } catch (error) {
    console.error('[authService] ‚ùå Erro ao obter usu√°rio atual:', error);
    return null;
  }
}

/**
 * Migrar usu√°rio existente para o sistema de autentica√ß√£o
 */
export async function migrateExistingUser(userId, password) {
  console.log('[authService] üîÑ Migrando usu√°rio ID:', userId);

  try {
    // 1. Buscar usu√°rio na tabela
    const { data: usuarios } = await query('usuarios', {
      eq: { id: userId },
      limit: 1,
    });

    if (!usuarios || usuarios.length === 0) {
      throw new Error('Usu√°rio n√£o encontrado');
    }

    const usuario = usuarios[0];

    if (usuario.auth_uuid) {
      console.log('[authService] ‚ö†Ô∏è Usu√°rio j√° migrado');
      return { alreadyMigrated: true, userData: usuario };
    }

    if (!usuario.email) {
      throw new Error('Usu√°rio n√£o possui email cadastrado');
    }

    console.log('[authService] üìß Criando auth para:', usuario.email);

    // 2. Criar no Supabase Auth
    const client = window.supabaseClient || window.supabase;
    if (!client || !client.auth) {
      throw new Error('Cliente Supabase n√£o inicializado');
    }
    
    const { data, error } = await client.auth.signUp({
      email: usuario.email,
      password: password,
      options: {
        data: {
          name: usuario.nome,
        },
      },
    });

    if (error) {
      console.error('[authService] ‚ùå Erro na cria√ß√£o auth:', error);
      throw error;
    }

    console.log('[authService] ‚úÖ Auth criado:', data.user.id);

    // 3. Atualizar tabela usuarios com auth_uuid
    const { data: updatedUser } = await update(
      'usuarios',
      { auth_uuid: data.user.id },
      { eq: { id: userId } }
    );

    console.log('[authService] ‚úÖ Usu√°rio migrado com sucesso');

    return {
      user: data.user,
      session: data.session,
      userData: updatedUser[0],
      migrated: true,
    };
  } catch (error) {
    console.error('[authService] ‚ùå Erro na migra√ß√£o:', error);
    throw error;
  }
}

/**
 * Verificar se usu√°rio precisa de migra√ß√£o
 */
export async function needsMigration(userId) {
  try {
    const { data: usuarios } = await query('usuarios', {
      eq: { id: userId },
      limit: 1,
    });

    if (!usuarios || usuarios.length === 0) {
      return false;
    }

    const usuario = usuarios[0];
    return !usuario.auth_uuid && !!usuario.email;
  } catch (error) {
    console.error('[authService] ‚ùå Erro ao verificar migra√ß√£o:', error);
    return false;
  }
}

/**
 * Listar usu√°rios que precisam de migra√ß√£o
 */
export async function getUsersNeedingMigration() {
  try {
    const { data: usuarios } = await query('usuarios', {
      is: { auth_uuid: null },
      not: { email: null },
    });

    return usuarios || [];
  } catch (error) {
    console.error('[authService] ‚ùå Erro ao listar usu√°rios para migra√ß√£o:', error);
    return [];
  }
}

/**
 * Resetar senha de usu√°rio
 * @param {string} email - Email do usu√°rio
 * @returns {Promise<Object>} Resultado da opera√ß√£o
 */
export async function resetPassword(email) {
  console.log('[authService] üîÑ Solicitando reset de senha para:', email);

  try {
    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throw new Error('Formato de email inv√°lido');
    }

    // Obter cliente Supabase
    let client = window.supabaseClient || window.supabase;
    
    // Se n√£o encontrou, tentar obter via getSupabaseClient
    if (!client) {
      console.log('[authService] Tentando obter cliente via getSupabaseClient...');
      client = await getSupabaseClient();
    }
    
    if (!client || !client.auth) {
      throw new Error('Cliente Supabase n√£o inicializado');
    }

    // Determinar URL de redirecionamento baseado no ambiente
    const isProduction = window.location.hostname !== 'localhost' && 
                        window.location.hostname !== '127.0.0.1';
    const redirectTo = isProduction 
      ? 'https://app-treino-pmarconatos-projects.vercel.app/reset-password'
      : `${window.location.origin}/reset-password`;
    
    console.log('[authService] üìß Enviando email de reset para:', email);
    console.log('[authService] üîó Redirect URL:', redirectTo);
    
    // Enviar email de reset - O Supabase j√° verifica se o email existe
    const { data, error } = await client.auth.resetPasswordForEmail(email, {
      redirectTo: `${redirectTo}?email=${encodeURIComponent(email)}`,
      captchaToken: null, // Pode ser usado para captcha se necess√°rio
    });

    if (error) {
      console.error('[authService] ‚ùå Erro no reset:', error);

      // Melhor tratamento de erros espec√≠ficos
      if (error.message?.includes('Email rate limit exceeded')) {
        throw new Error(
          'Muitas tentativas de reset. Aguarde alguns minutos antes de tentar novamente.'
        );
      } else if (error.message?.includes('Invalid email')) {
        throw new Error('Email inv√°lido');
      } else {
        // N√£o expor se o email existe ou n√£o por seguran√ßa
        throw new Error('Se o email estiver cadastrado, voc√™ receber√° as instru√ß√µes de recupera√ß√£o');
      }
    }

    console.log('[authService] ‚úÖ Email de reset processado com sucesso');

    // Sempre retornar sucesso para n√£o expor se o email existe
    return {
      success: true,
      email: email,
      message: 'Se o email estiver cadastrado, voc√™ receber√° as instru√ß√µes de recupera√ß√£o',
      data: data,
    };
  } catch (error) {
    console.error('[authService] ‚ùå Erro no reset de senha:', error);

    // Para erros de valida√ß√£o, retornar mensagem espec√≠fica
    if (error.message === 'Formato de email inv√°lido' || 
        error.message === 'Cliente Supabase n√£o inicializado') {
      return {
        success: false,
        error: error,
        message: error.message,
      };
    }

    // Para outros erros, retornar mensagem gen√©rica por seguran√ßa
    return {
      success: true,
      email: email,
      message: 'Se o email estiver cadastrado, voc√™ receber√° as instru√ß√µes de recupera√ß√£o',
    };
  }
}

/**
 * Verificar se email j√° est√° cadastrado no Auth
 */
export async function checkEmailExists(email) {
  try {
    console.log('[authService] Debug - window.supabaseClient:', window.supabaseClient);
    console.log('[authService] Debug - window.supabase:', window.supabase);
    
    // Tentar v√°rias formas de acessar o cliente
    let client = window.supabaseClient || window.supabase;
    
    // Se n√£o encontrou, tentar importar e obter
    if (!client) {
      console.log('[authService] Tentando obter cliente via getSupabaseClient...');
      const supabaseClient = await getSupabaseClient();
      client = supabaseClient;
    }
    
    console.log('[authService] Debug - client:', client);
    console.log('[authService] Debug - client?.auth:', client?.auth);
    console.log('[authService] Debug - typeof client?.auth:', typeof client?.auth);
    
    if (!client || !client.auth) {
      console.error('[authService] Cliente Supabase n√£o inicializado');
      console.error('[authService] client:', client);
      console.error('[authService] client?.auth:', client?.auth);
      
      // Tentar verificar diretamente na tabela como fallback
      console.log('[authService] Tentando verificar email diretamente na tabela...');
      const { data: users } = await query('usuarios', {
        eq: { email: email },
        limit: 1
      });
      
      return users && users.length > 0;
    }
    
    // Tentar fazer login com senha falsa para verificar se o email existe
    const { error } = await client.auth.signInWithPassword({
      email: email,
      password: 'fake-password-to-test',
    });

    // Se o erro for "Invalid login credentials", o email existe
    // Se for "User not found" ou similar, n√£o existe
    if (error) {
      if (error.message.includes('Invalid login credentials')) {
        return true; // Email existe
      } else {
        return false; // Email n√£o existe
      }
    }

    return true; // Login funcionou (improv√°vel com senha fake)
  } catch (error) {
    console.error('[authService] ‚ùå Erro ao verificar email:', error);
    return false;
  }
}
