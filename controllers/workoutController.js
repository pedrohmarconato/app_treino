/**
 * üéÆ CONTROLADOR DE TREINO - Workout Controller
 *
 * FUN√á√ÉO: Gerenciar a interface de usu√°rio relacionada a treinos, centralizando atualiza√ß√µes de dados e elementos DOM.
 *
 * RESPONSABILIDADES:
 * - Buscar dados completos de treino via queries especializadas
 * - Atualizar elementos da UI de forma coordenada e consistente
 * - Gerenciar diferentes tipos de treino (for√ßa, cardio, folga)
 * - Sincronizar dados com AppState para reatividade
 * - Tratar estados de erro e aus√™ncia de dados
 * - Fornecer interface unificada para atualiza√ß√µes de treino
 *
 * ARQUITETURA:
 * - Controller Layer: coordena queries e atualiza√ß√µes de UI
 * - Fun√ß√£o principal: atualizarTodoTreinoUI() - √öNICA fun√ß√£o que deve ser chamada pelas telas
 * - Fun√ß√µes especializadas para cada se√ß√£o da UI
 * - Sistema de fallback para cen√°rios de erro
 *
 * TIPOS DE TREINO SUPORTADOS:
 * - For√ßa: treinos com exerc√≠cios estruturados por semana/protocolo
 * - Cardio: atividades cardiovasculares com dura√ß√£o estimada
 * - Folga: dias de descanso e recupera√ß√£o
 *
 * ELEMENTOS UI GERENCIADOS:
 * - Card principal: nome, exerc√≠cios, tipo de treino
 * - Indicadores de semana: n√∫mero, status, progresso
 * - Estat√≠sticas: treinos conclu√≠dos, percentual de progresso
 * - Bot√µes de a√ß√£o: texto e comportamento contextual
 *
 * INTEGRA√á√ÉO: Usado pelo dashboard principal e sistema de navega√ß√£o
 */

// controllers/workoutController.js - Controlador que gerencia a UI de treinos
// Pega dados das queries e atualiza elementos da p√°gina

import { buscarTreinoCompleto, buscarEstatisticasUsuario } from '../queries/workoutQueries.js';

/**
 * Controlador principal para atualizar toda a UI de treinos
 * Esta √© a √öNICA fun√ß√£o que deve ser chamada pelas telas
 * @param {string} userId - ID do usu√°rio
 */
export async function atualizarTodoTreinoUI(userId) {
  console.log('[workoutController.atualizarTodoTreinoUI] üéÆ Atualizando UI completa para:', userId);

  try {
    // 1. Buscar dados completos do treino
    const resultadoTreino = await buscarTreinoCompleto(userId);
    console.log('[workoutController.atualizarTodoTreinoUI] üì¶ Dados recebidos:', resultadoTreino);

    // 2. Buscar estat√≠sticas
    const resultadoEstatisticas = await buscarEstatisticasUsuario(userId);

    // 3. Atualizar todos os elementos da UI
    if (resultadoTreino.success) {
      atualizarCardPrincipal(resultadoTreino);
      atualizarIndicadoresSemana(resultadoTreino);
      atualizarAppState(resultadoTreino);
    } else {
      atualizarUIParaSemTreino(resultadoTreino.message);
    }

    if (resultadoEstatisticas.success) {
      atualizarEstatisticas(resultadoEstatisticas);
    }

    console.log('[workoutController.atualizarTodoTreinoUI] ‚úÖ UI atualizada com sucesso');

    return resultadoTreino;
  } catch (error) {
    console.error('[workoutController.atualizarTodoTreinoUI] ‚ùå Erro:', error);
    atualizarUIParaErro(error.message);
    return { success: false, message: error.message };
  }
}

/**
 * Atualizar card principal de treino
 */
function atualizarCardPrincipal(resultado) {
  console.log('[workoutController.atualizarCardPrincipal] üéØ Atualizando card principal...');

  const elementos = {
    workoutName: document.getElementById('workout-name'),
    workoutExercises: document.getElementById('workout-exercises'),
    workoutType: document.getElementById('workout-type'),
    btnText: document.getElementById('btn-text'),
  };

  const { planejamento, exercicios, semanaProtocolo } = resultado.data;

  switch (resultado.tipo) {
    case 'folga':
      updateElement(elementos.workoutName, 'Dia de Folga');
      updateElement(elementos.workoutExercises, 'Repouso e recupera√ß√£o');
      updateElement(elementos.workoutType, 'Descanso');
      updateElement(elementos.btnText, 'Dia de Descanso');
      break;

    case 'cardio':
      updateElement(elementos.workoutName, 'Treino Cardiovascular');
      updateElement(elementos.workoutExercises, 'Exerc√≠cios aer√≥bicos ‚Ä¢ 30-45min');
      updateElement(elementos.workoutType, 'Cardio');
      updateElement(elementos.btnText, 'Iniciar Cardio');
      break;

    case 'forca': {
      const tipoTreino = planejamento.tipo_atividade;
      const numExercicios = exercicios?.length || 0;

      updateElement(elementos.workoutName, `Treino ${tipoTreino} - Semana ${semanaProtocolo}`);
      updateElement(
        elementos.workoutExercises,
        `${numExercicios} exerc√≠cios ‚Ä¢ Semana ${semanaProtocolo} ‚Ä¢ ${tipoTreino}`
      );
      updateElement(elementos.workoutType, `Treino ${tipoTreino}`);
      updateElement(elementos.btnText, 'Iniciar Treino');
      break;
    }
  }

  console.log('[workoutController.atualizarCardPrincipal] ‚úÖ Card principal atualizado');
}

/**
 * Atualizar indicadores da semana
 */
function atualizarIndicadoresSemana(resultado) {
  console.log('[workoutController.atualizarIndicadoresSemana] üìÖ Atualizando indicadores...');

  const elementos = {
    weekNumber: document.getElementById('week-number'),
    weekStatus: document.getElementById('week-status'),
    currentWeek: document.getElementById('current-week'),
  };

  const semana = resultado.data.semanaProtocolo;

  updateElement(elementos.weekNumber, `Semana ${semana}`);
  updateElement(elementos.weekStatus, 'Ativa');
  updateElement(elementos.currentWeek, `Semana ${semana}`);

  // Aplicar classe CSS adequada
  if (elementos.weekStatus) {
    elementos.weekStatus.className = 'week-status atual';
  }

  console.log(
    '[workoutController.atualizarIndicadoresSemana] ‚úÖ Indicadores atualizados para semana',
    semana
  );
}

/**
 * Atualizar AppState
 */
function atualizarAppState(resultado) {
  console.log('[workoutController.atualizarAppState] üóÉÔ∏è Atualizando AppState...');

  if (!window.AppState) {
    console.warn('[workoutController.atualizarAppState] ‚ö†Ô∏è AppState n√£o dispon√≠vel');
    return;
  }

  const { planejamento, exercicios, semanaProtocolo } = resultado.data;

  const workoutData = {
    tipo: planejamento.tipo_atividade,
    nome: `Treino ${planejamento.tipo_atividade}`,
    grupo_muscular: planejamento.tipo_atividade,
    semana_treino: semanaProtocolo,
    exercicios: exercicios || [],
    concluido: planejamento.concluido || false,
    metadata: resultado.data.metadata,
  };

  window.AppState.set('currentWorkout', workoutData);
  console.log('[workoutController.atualizarAppState] ‚úÖ AppState atualizado:', workoutData);
}

/**
 * Atualizar estat√≠sticas
 */
function atualizarEstatisticas(resultado) {
  console.log('[workoutController.atualizarEstatisticas] üìä Atualizando estat√≠sticas...');

  const elementos = {
    completedWorkouts: document.getElementById('completed-workouts'),
    userWorkouts: document.getElementById('user-workouts'),
    progressPercentage: document.getElementById('progress-percentage'),
  };

  const stats = resultado.data;

  updateElement(elementos.completedWorkouts, stats.treinosConcluidos);
  updateElement(elementos.userWorkouts, stats.treinosConcluidos);
  updateElement(elementos.progressPercentage, `${stats.progressoProtocolo}%`);

  console.log('[workoutController.atualizarEstatisticas] ‚úÖ Estat√≠sticas atualizadas');
}

/**
 * UI para quando n√£o h√° treino
 */
function atualizarUIParaSemTreino(mensagem) {
  console.log('[workoutController.atualizarUIParaSemTreino] üì≠ Sem treino:', mensagem);

  const elementos = {
    workoutName: document.getElementById('workout-name'),
    workoutExercises: document.getElementById('workout-exercises'),
    workoutType: document.getElementById('workout-type'),
    btnText: document.getElementById('btn-text'),
  };

  updateElement(elementos.workoutName, 'Nenhum treino configurado');
  updateElement(elementos.workoutExercises, 'Configure seu planejamento semanal');
  updateElement(elementos.workoutType, 'Configure');
  updateElement(elementos.btnText, 'Configurar Planejamento');
}

/**
 * UI para erro
 */
function atualizarUIParaErro(mensagem) {
  console.error('[workoutController.atualizarUIParaErro] ‚ùå Erro:', mensagem);

  const elementos = {
    workoutName: document.getElementById('workout-name'),
    workoutExercises: document.getElementById('workout-exercises'),
  };

  updateElement(elementos.workoutName, 'Erro ao carregar treino');
  updateElement(elementos.workoutExercises, `Erro: ${mensagem}`);
}

/**
 * Fun√ß√£o auxiliar para atualizar elementos
 */
function updateElement(element, content) {
  if (element && content !== null && content !== undefined) {
    element.textContent = content;
  }
}

/**
 * Fun√ß√£o para carregar dados dos exerc√≠cios no expandir
 * Mant√©m compatibilidade com o sistema existente
 */
export async function carregarExerciciosParaExpandir(userId) {
  console.log('[workoutController.carregarExerciciosParaExpandir] üìã Carregando para expandir...');

  const resultado = await buscarTreinoCompleto(userId);

  if (resultado.success && resultado.tipo === 'forca') {
    return {
      data: resultado.data.exercicios,
      planejamento: {
        tipo_atividade: resultado.data.planejamento.tipo_atividade,
        semana_treino: resultado.data.semanaProtocolo,
      },
    };
  }

  return null;
}

// Fun√ß√£o de teste
export async function testarControllerCompleto(userId) {
  console.log('üß™ [TESTE-CONTROLLER] Testando controller completo...');

  const resultado = await atualizarTodoTreinoUI(userId);

  console.log('üß™ [TESTE-CONTROLLER] Resultado:', resultado);
  console.log(
    'üß™ [TESTE-CONTROLLER] CurrentWorkout no AppState:',
    window.AppState?.get('currentWorkout')
  );

  return resultado;
}

// Disponibilizar globalmente para testes
window.testarControllerCompleto = testarControllerCompleto;

console.log('üéÆ Workout Controller carregado - UI centralizada ativa!');
