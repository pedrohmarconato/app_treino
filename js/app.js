/**
 * üè† APP PRINCIPAL - Ponto de entrada da aplica√ß√£o
 * 
 * FUN√á√ÉO: Arquivo de inicializa√ß√£o principal que configura a aplica√ß√£o de treinos.
 * 
 * RESPONSABILIDADES:
 * - Inicializar o estado global da aplica√ß√£o (AppState)
 * - Carregar e configurar todas as funcionalidades principais
 * - Configurar navega√ß√£o entre telas (login, dashboard, workout, planning)
 * - Integrar protocolos de treino com Supabase
 * - Gerenciar cache e sincroniza√ß√£o offline
 * 
 * ARQUITETURA:
 * - Carrega features: planning.js, workout.js, dashboard.js
 * - Configura servi√ßos: navigation, notifications, protocol integration
 * - Exp√µe fun√ß√µes globais necess√°rias para o funcionamento da UI
 * 
 * IMPORTANTE: Este arquivo √© carregado pelo index.html e deve manter 
 * compatibilidade com browsers sem suporte total a ES6 modules.
 */
import AppState from '../state/appState.js';
// Importar apenas o que √© necess√°rio, resto ser√° acessado via window
import '../feature/planning.js';
import { mostrarTela, logout } from '../ui/navigation.js';
import { showNotification } from '../ui/notifications.js';
// DESABILITADO - workoutExecution.js estava bugado, usando workout.js
// import '../feature/workoutExecution.js';
import '../feature/workout.js';
import { initializeProtocol } from '../integration/protocolIntegration.js';
import { integrationService } from '../services/integrationService.js';
// Importar fun√ß√µes de localStorage para disponibilizar globalmente
import '../utils/weekPlanStorage.js';
// Importar weeklyPlanningService para disponibilizar WeeklyPlanService globalmente
import '../services/weeklyPlanningService.js';
// CR√çTICO: Importar e disponibilizar DisposicaoInicioModal globalmente
import DisposicaoInicioModal from '../components/disposicaoInicioModal.js';

// Verificar depend√™ncias cr√≠ticas
function checkDependencies() {
    const errors = [];
    
    if (!window.supabase) errors.push('Supabase n√£o est√° carregado!');
    if (!window.SUPABASE_CONFIG) errors.push('Configura√ß√£o do Supabase n√£o encontrada!');
    if (!window.SUPABASE_CONFIG?.url || !window.SUPABASE_CONFIG?.key) {
        errors.push('Configura√ß√£o do Supabase incompleta!');
    }
    
    if (errors.length > 0) {
        console.error('‚ùå Erros de depend√™ncia:', errors);
        errors.forEach(error => showNotification(error, 'error'));
        return false;
    }
    
    return true;
}

import { initTemplates, renderTemplate as renderTemplateModule } from '../templates/index.js';

// Inicializar aplica√ß√£o
async function initApp() {
    console.log('[initApp] üöÄ INICIANDO APLICA√á√ÉO...');
    
    if (!checkDependencies()) {
        console.error('‚ùå Falha na verifica√ß√£o de depend√™ncias');
        // FALLBACK: Tentar renderizar algo b√°sico mesmo assim
        const app = document.getElementById('app');
        if (app) {
            app.innerHTML = `
                <div style="padding: 20px; color: white; background: #ff0000;">
                    <h1>ERRO: Depend√™ncias n√£o carregadas</h1>
                    <p>Verifique se o Supabase est√° configurado corretamente.</p>
                </div>
            `;
        }
        return;
    }
    
    try {
        console.log('[initApp] ‚úÖ Depend√™ncias verificadas');
        // 1. Inicializar sistema de templates se ainda n√£o estiver
        if (!window.renderTemplate) {
            console.log('[initApp] üîß Inicializando sistema de templates...');
            try {
                await initTemplates();
                // Expor fun√ß√£o renderTemplate globalmente caso initTemplates n√£o o fa√ßa (edge-case)
                if (!window.renderTemplate && renderTemplateModule) {
                    window.renderTemplate = renderTemplateModule;
                }
                console.log('[initApp] ‚úÖ Sistema de templates inicializado');
            } catch (tplErr) {
                console.error('[initApp] ‚ùå Falha ao inicializar templates:', tplErr);
            }
        }
        
        // 1. Aguardar m√≥dulos carregarem
        console.log('[initApp] ‚è≥ Aguardando m√≥dulos carregarem...');
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // 2. Configurar fun√ß√µes globais
        console.log('[initApp] üîß Configurando fun√ß√µes globais...');
        setupGlobalFunctions();
        console.log('[initApp] ‚úÖ Fun√ß√µes globais configuradas');
        
        // 2. Inicializar protocolo
        console.log('[initApp] üîÑ Inicializando protocolo...');
        await initializeProtocol();
        console.log('[initApp] ‚úÖ Protocolo inicializado');
        
        // 3. Iniciar na tela de login
        console.log('[initApp] üîë Iniciando tela de login...');
        if (window.initLogin) {
            await window.initLogin();
            console.log('[initApp] ‚úÖ Login inicializado');
        } else {
            console.error('[initApp] ‚ùå window.initLogin n√£o est√° definido');
            // FALLBACK: Renderizar login diretamente
            if (window.renderTemplate) {
                console.log('[initApp] üîÑ Tentando renderTemplate login como fallback...');
                window.renderTemplate('login');
            } else {
                throw new Error('Nem window.initLogin nem window.renderTemplate est√£o definidos');
            }
        }
        
        // 4. Configurar debug (desenvolvimento)
        console.log('[initApp] üîß Configurando sistema de debug...');
        setupDebugSystem();
        console.log('[initApp] ‚úÖ Debug configurado');
        
        console.log('[initApp] üéâ APLICA√á√ÉO INICIALIZADA COM SUCESSO!');
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico na inicializa√ß√£o:', error);
        console.error('Stack trace:', error.stack);
        showNotification('Erro cr√≠tico ao iniciar aplica√ß√£o: ' + error.message, 'error');
        
        // FALLBACK: Tentar renderizar tela de erro
        const app = document.getElementById('app');
        if (app) {
            app.innerHTML = `
                <div style="padding: 20px; color: white; background: #333;">
                    <h1>Erro na Inicializa√ß√£o</h1>
                    <p><strong>Erro:</strong> ${error.message}</p>
                    <p>Verifique o console para mais detalhes.</p>
                    <button onclick="location.reload()" style="padding: 10px; margin-top: 10px;">Recarregar P√°gina</button>
                </div>
            `;
        }
    }
}

// Configurar fun√ß√µes globais essenciais
function setupGlobalFunctions() {
    // === NAVEGA√á√ÉO ===
    window.mostrarTela = (tela) => {
        mostrarTela(tela);
    };
    
    window.voltarParaHome = () => {
        mostrarTela('home-screen');
    };
    
    window.logout = logout;
    
    // === COMPONENTES CR√çTICOS ===
    // Disponibilizar DisposicaoInicioModal globalmente
    window.DisposicaoInicioModal = DisposicaoInicioModal;
    console.log('[APP] ‚úÖ DisposicaoInicioModal disponibilizado globalmente');

    // === PERSIST√äNCIA DE TREINO ===
    // workoutPersistence.js foi removido - funcionalidade integrada em workoutExecution.js
    
    // === LOGIN ===
    window.initLogin = async () => {
        const { initLoginScreen } = await import('../feature/login.js');
        return initLoginScreen();
    };
    
    // === DASHBOARD ===
    window.carregarDashboard = async () => {
        try {
            // Verificar se h√° usu√°rio antes de carregar dashboard
            const currentUser = AppState.get('currentUser');
            if (!currentUser || !currentUser.id) {
                console.error('[app.js] ‚ùå Tentativa de carregar dashboard sem usu√°rio v√°lido');
                showNotification('Usu√°rio n√£o est√° logado. Fa√ßa login novamente.', 'error');
                
                if (window.renderTemplate) {
                    window.renderTemplate('login');
                }
                return;
            }
            
            const { carregarDashboard } = await import('../feature/dashboard.js');
            await carregarDashboard();
        } catch (error) {
            console.error('[app.js] Erro no dashboard:', {
                message: error?.message,
                stack: error?.stack,
                name: error?.name,
                fullError: error
            });
            showNotification('Erro ao carregar dashboard: ' + (error?.message || 'Erro desconhecido'), 'error');
        }
    };
    
    // === PLANEJAMENTO ===
    window.salvarPlanejamento = async () => {
        try {
            await window.salvarPlanejamentoSemanal();
        } catch (error) {
            console.error('[app.js] Erro ao salvar planejamento:', error);
            showNotification('Erro ao salvar planejamento', 'error');
        }
    };
    
    // As fun√ß√µes j√° est√£o dispon√≠veis via window no planning.js
    // Apenas verificar se est√£o carregadas
    if (!window.inicializarPlanejamento) {
        console.warn('[app.js] inicializarPlanejamento ainda n√£o carregada');
    }
    if (!window.fecharModalPlanejamento) {
        console.warn('[app.js] fecharModalPlanejamento ainda n√£o carregada');
    }
    
    // Fun√ß√£o de debug para testar indicadores da semana
    window.testarIndicadoresSemana = async () => {
        console.log('[DEBUG] Testando carregamento dos indicadores da semana...');
        const { carregarIndicadoresSemana } = await import('../feature/dashboard.js');
        await carregarIndicadoresSemana();
    };
    
    // Fun√ß√µes do seletor de treino (j√° definidas em feature/planning.js)
    // Garantir que est√£o dispon√≠veis globalmente
    
    // === HOME SCREEN AVAN√áADA ===
    window.initializeHomeScreen = async function() {
        console.log('[app.js] Inicializando home screen avan√ßada...');
        
        try {
            const currentUser = AppState.get('currentUser');
            
            if (!currentUser || !currentUser.id) {
                console.error('[app.js] ‚ùå Usu√°rio n√£o logado ou sem ID');
                console.log('[app.js] currentUser atual:', currentUser);
                console.log('[app.js] Estado completo do AppState:', AppState.state);
                
                showNotification('Usu√°rio n√£o est√° logado. Redirecionando...', 'warning');
                setTimeout(() => {
                    if (window.renderTemplate) {
                        window.renderTemplate('login');
                    }
                }, 500);
                return;
            }
            
            console.log('[app.js] ‚úÖ Usu√°rio v√°lido encontrado:', currentUser.nome, `(ID: ${currentUser.id})`);
            
            // Usar servi√ßo de integra√ß√£o
            const success = await integrationService.initialize();
            
            if (success) {
                console.log('[app.js] ‚úÖ Home screen inicializada com integra√ß√£o completa');
            } else {
                console.warn('[app.js] ‚ö†Ô∏è Home screen inicializada com funcionalidade limitada');
                setupBasicHomeElements(currentUser);
            }
            // Carregar card de progress√£o da semana
            try {
                const { mostrarProgressaoSemana } = await import('../feature/progressaoSemana.js');
                mostrarProgressaoSemana(currentUser.id);
            } catch(progressErr) {
                console.warn('[app.js] N√£o foi poss√≠vel carregar progress√£o da semana:', progressErr);
            }
            
            setupHomeEventListeners(); // Adiciona listeners ap√≥s a inicializa√ß√£o da home
            
        } catch (error) {
            console.error('[app.js] Erro na inicializa√ß√£o da home:', error);
            setupBasicHomeElements(AppState.get('currentUser'));
            setupHomeEventListeners(); // Adiciona listeners mesmo em caso de erro, se elementos b√°sicos foram configurados
        }
    };
    
    // === PLANEJAMENTO SEMANAL ===
    window.abrirPlanejamentoParaUsuarioAtual = () => {
        const currentUser = AppState.get('currentUser');
        if (currentUser && currentUser.id) {
            if (window.renderTemplate) {
                window.renderTemplate('planejamentoSemanalPage');
                setTimeout(() => {
                    if (window.inicializarPlanejamento) {
                        window.inicializarPlanejamento(currentUser.id);
                    }
                }, 100);
            }
        } else {
            showNotification('Fa√ßa login para acessar o planejamento.', 'error');
        }
    };
    
    // === EDI√á√ÉO DE PLANEJAMENTO ===
    window.editarPlanejamentoSemanal = async () => {
        const currentUser = AppState.get('currentUser');
        if (currentUser && currentUser.id) {
            try {
                const { abrirEdicaoPlanejamento } = await import('../feature/planning.js');
                await abrirEdicaoPlanejamento(currentUser.id);
            } catch (error) {
                console.error('[app.js] Erro ao abrir edi√ß√£o de planejamento:', error);
                showNotification('Erro ao abrir edi√ß√£o de planejamento', 'error');
            }
        } else {
            showNotification('Fa√ßa login para editar o planejamento.', 'error');
        }
    };
    
    // === TREINO ===
    // Note: window.iniciarTreino is now defined in protocolIntegration.js
    // This allows the proper flow with disposition modal and workout execution
}

// Fun√ß√£o para configurar event listeners da tela home
function setupHomeEventListeners() {
    console.log('[app.js] Configurando event listeners da home...');
    const startWorkoutButton = document.getElementById('start-workout-btn');
    if (startWorkoutButton) {
        startWorkoutButton.removeEventListener('click', window.iniciarTreino); // Remover listener antigo para evitar duplicidade
        startWorkoutButton.addEventListener('click', window.iniciarTreino);
        console.log('[app.js] Event listener adicionado ao bot√£o #start-workout-btn.');
    } else {
        console.warn('[app.js] Bot√£o #start-workout-btn n√£o encontrado no DOM para adicionar event listener.');
    }
}

// Configurar elementos b√°sicos da home (fallback)
function setupBasicHomeElements(user) {
    if (!user) return;
    
    try {
        const startBtn = document.getElementById('start-workout-btn');
        if (startBtn) {
            startBtn.disabled = false;
            startBtn.onclick = () => {
                const workout = AppState.get('currentWorkout');
                if (workout) {
                    switch(workout.tipo) {
                        case 'cardio':
                            showNotification('Hora do cardio! üèÉ‚Äç‚ôÇÔ∏è', 'info');
                            break;
                        default:
                            if (window.iniciarTreino) {
                                window.iniciarTreino();
                            } else {
                                showNotification('Sistema de treino carregando...', 'info');
                            }
                            break;
                    }
                } else {
                    if (window.abrirPlanejamentoParaUsuarioAtual) {
                        window.abrirPlanejamentoParaUsuarioAtual();
                    } else {
                        showNotification('Configure seu planejamento primeiro', 'warning');
                    }
                }
            };
        }
        
        // Configurar informa√ß√µes b√°sicas do usu√°rio
        updateElement('user-name', user.nome);
        
        const userImages = { 'Pedro': 'pedro.png', 'Japa': 'japa.png', 'Vini': 'vini.png' };
        const avatarEl = document.getElementById('user-avatar');
        if (avatarEl) {
            avatarEl.src = userImages[user.nome] || 'pedro.png';
            avatarEl.alt = user.nome;
        }
        
        // Valores padr√£o
        updateElement('workout-name', 'Configure Treino');
        updateElement('completed-workouts', '0');
        updateElement('current-week', '1');
        updateElement('progress-percentage', '0%');
        
        console.log('[setupBasicHomeElements] ‚úÖ Elementos b√°sicos configurados');
        
    } catch (error) {
        console.error('[setupBasicHomeElements] Erro:', error);
    }
}

// Configurar sistema de debug (desenvolvimento)
function setupDebugSystem() {
    if (!window.location.hostname.includes('localhost') && 
        !window.location.hostname.includes('127.0.0.1')) {
        return; // S√≥ em desenvolvimento
    }
    
    window.debugApp = {
        // Estado da aplica√ß√£o
        state: () => ({
            appState: AppState,
            currentUser: AppState.get('currentUser'),
            weekPlan: AppState.get('weekPlan'),
            currentWorkout: AppState.get('currentWorkout')
        }),
        
        // Fun√ß√µes dispon√≠veis
        functions: () => Object.keys(window).filter(key => 
            typeof window[key] === 'function' && key.startsWith('iniciar') || 
            key.startsWith('carregar') || key.startsWith('mostrar')
        ),
        
        // Status das depend√™ncias
        dependencies: () => ({
            supabase: !!window.supabase,
            config: !!window.SUPABASE_CONFIG,
            renderTemplate: !!window.renderTemplate,
            protocolo: !!window.iniciarTreino,
            dashboard: !!window.carregarDashboard,
            planning: !!window.inicializarPlanejamento
        }),
        
        // Integra√ß√£o
        integration: () => integrationService.getStatus(),
        metrics: () => integrationService.getPerformanceMetrics(),
        
        // Utilidades
        clearCache: () => {
            localStorage.clear();
            sessionStorage.clear();
            console.log('üßπ Cache limpo');
        },
        
        testProtocol: () => {
            if (window.testarProtocolo) {
                window.testarProtocolo();
            } else {
                console.log('‚ùå Fun√ß√£o de teste do protocolo n√£o dispon√≠vel');
            }
        },
        
        simulateTreino: async () => {
            const currentUser = AppState.get('currentUser');
            if (!currentUser) {
                console.log('‚ùå Nenhum usu√°rio logado');
                return;
            }
            
            if (window.iniciarTreino) {
                console.log('üèãÔ∏è Simulando in√≠cio de treino...');
                await window.iniciarTreino();
            } else {
                console.log('‚ùå Fun√ß√£o iniciarTreino n√£o dispon√≠vel');
            }
        },
        
        forceReload: () => {
            console.log('üîÑ For√ßando reload da aplica√ß√£o...');
            window.location.reload();
        },
        
        // Limpeza e reinicializa√ß√£o
        cleanup: () => {
            integrationService.cleanup();
            console.log('üßπ Servi√ßos limpos');
        },
        
        reinit: async () => {
            console.log('üîÑ Reinicializando servi√ßos...');
            await integrationService.reinitialize();
            console.log('‚úÖ Servi√ßos reinicializados');
        }
    };
    
    console.log('[app.js] üîß Sistema de debug configurado');
    console.log('üí° Use window.debugApp para acessar ferramentas de debug');
    console.log('üîç Comandos √∫teis:');
    console.log('  - window.debugApp.state() - Ver estado atual');
    console.log('  - window.debugApp.dependencies() - Verificar depend√™ncias');
    console.log('  - window.debugApp.integration() - Status da integra√ß√£o');
    console.log('  - window.debugApp.clearCache() - Limpar cache');
    console.log('  - window.debugApp.reinit() - Reinicializar servi√ßos');
}

// Event listeners principais
document.addEventListener('DOMContentLoaded', () => {
    console.log('[app.js] üìÑ DOM carregado, iniciando diagn√≥stico...');
    
    // Diagn√≥stico inicial
    console.log('[app.js] üîç Diagn√≥stico:');
    console.log('  - window.renderTemplate:', !!window.renderTemplate);
    console.log('  - window.SUPABASE_CONFIG:', !!window.SUPABASE_CONFIG);
    console.log('  - window.supabase:', !!window.supabase);
    console.log('  - document.getElementById("app"):', !!document.getElementById('app'));
    
    // Aguardar templates carregarem
    const initTimeout = setTimeout(() => {
        console.log('[app.js] ‚è∞ Iniciando ap√≥s timeout de 300ms...');
        initApp();
    }, 300);
    
    // Verificar se templates j√° est√£o carregados
    if (window.renderTemplate) {
        clearTimeout(initTimeout);
        console.log('[app.js] ‚ö° Templates j√° carregados, iniciando imediatamente');
        initApp();
    } else {
        console.log('[app.js] ‚è≥ Templates n√£o carregados ainda, aguardando timeout...');
    }
});

// Tratamento de erros global otimizado
window.addEventListener('error', (event) => {
    // Filtrar erros de desenvolvimento e extens√µes
    if (event.filename && (
        event.filename.includes('localhost') || 
        event.filename.includes('127.0.0.1') ||
        event.filename.includes('chrome-extension') ||
        event.filename.includes('moz-extension')
    )) {
        return;
    }
    
    console.error('üî• Erro global:', {
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
        error: event.error
    });
    
    // Mostrar notifica√ß√£o apenas para erros cr√≠ticos
    if (event.message && event.message.includes('is not defined')) {
        showNotification('Erro de fun√ß√£o n√£o encontrada. Recarregue a p√°gina.', 'error');
    }
});

// Tratamento de promises rejeitadas
window.addEventListener('unhandledrejection', (event) => {
    console.error('üö® Promise rejeitada:', event.reason);
    
    // Tratar erros espec√≠ficos
    if (event.reason && event.reason.message) {
        const message = event.reason.message;
        
        if (message.includes('Failed to fetch')) {
            console.warn('‚ö†Ô∏è Erro de rede ignorado');
            event.preventDefault();
            return;
        }
        
        if (message.includes('Supabase')) {
            console.error('üíæ Erro do Supabase:', message);
            showNotification('Erro de conex√£o com o banco de dados', 'error');
            event.preventDefault();
            return;
        }
        
        if (message.includes('NetworkError')) {
            console.warn('‚ö†Ô∏è Erro de rede ignorado');
            event.preventDefault();
            return;
        }
    }
});

// Detectar mudan√ßas de conectividade
window.addEventListener('online', () => {
    console.log('üì∂ Conex√£o restaurada');
    showNotification('Conex√£o restaurada', 'success');
    
    // Tentar recarregar dados
    if (window.recarregarDashboard) {
        setTimeout(window.recarregarDashboard, 1000);
    }
});

window.addEventListener('offline', () => {
    console.log('üìµ Conex√£o perdida');
    showNotification('Sem conex√£o com a internet', 'warning');
});

// Fun√ß√£o auxiliar para atualizar elementos
function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
    }
}

// Adicionar estilos de anima√ß√£o globais
function addGlobalStyles() {
    if (document.getElementById('app-global-styles')) return;

    const style = document.createElement('style');
    style.id = 'app-global-styles';
    style.textContent = `
        /* Anima√ß√µes globais */
        @keyframes slideUp {
            from { transform: translate(-50%, 100%); opacity: 0; }
            to { transform: translate(-50%, 0); opacity: 1; }
        }
        
        @keyframes slideDown {
            from { transform: translate(-50%, 0); opacity: 1; }
            to { transform: translate(-50%, 100%); opacity: 0; }
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* Classes utilit√°rias */
        .notification { animation: slideUp 0.3s ease; }
        .notification.hide { animation: slideDown 0.3s ease; }
        .loading-spinner { animation: spin 1s linear infinite; }
        .pulse { animation: pulse 2s infinite; }
        .fade-in { animation: fadeIn 0.5s ease; }
        
        /* Transi√ß√µes suaves */
        .smooth-transition {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        /* Estados de carregamento */
        .loading-state {
            opacity: 0.6;
            pointer-events: none;
        }
        
        /* Melhorias de acessibilidade */
        .screen-reader-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
    `;
    
    document.head.appendChild(style);
}

// === INTEGRA√á√ÉO: Salvar Ordem Semana ===
// Fun√ß√£o para salvar ordem dos treinos na semana
async function salvarOrdemSemana(userId, ano, semana, ordemArray) {
    try {
        // Implementa√ß√£o b√°sica - atualizar ordem dos treinos
        // Aqui voc√™ pode implementar a l√≥gica espec√≠fica conforme necess√°rio
        console.log('Salvando ordem da semana:', { userId, ano, semana, ordemArray });
        
        // Por enquanto, apenas log - implementar conforme necessidade
        return { success: true };
    } catch (error) {
        console.error('Erro ao salvar ordem da semana:', error);
        throw error;
    }
}

document.addEventListener('click', async (e) => {
    if (e.target && e.target.id === 'salvar-ordem-semana') {
        const currentUser = AppState.get('currentUser');
        if (!currentUser || !currentUser.id) {
            showNotification('Usu√°rio n√£o identificado!', 'error');
            return;
        }
        // Assumindo que semana/ano atuais est√£o no AppState
        const semana = AppState.get('semanaAtual');
        const ano = AppState.get('anoAtual');
        if (!semana || !ano) {
            showNotification('Semana/ano atuais n√£o encontrados!', 'error');
            return;
        }
        // Coletar ordem atual dos itens do DOM
        const ul = document.getElementById('semana-list-ul');
        if (!ul) {
            showNotification('Lista de dias da semana n√£o encontrada!', 'error');
            return;
        }
        const novaOrdemArray = Array.from(ul.children).map((li, idx) => {
            // Supondo que cada li tem data-index e data-dia_semana original
            const originalDiaSemana = parseInt(li.getAttribute('data-dia_semana')) || (idx + 1);
            return { dia_semana: originalDiaSemana };
        });
        try {
            await salvarOrdemSemana(currentUser.id, ano, semana, novaOrdemArray);
            showNotification('Ordem dos treinos salva com sucesso!', 'success');
        } catch (err) {
            showNotification('Erro ao salvar ordem dos treinos', 'error');
            console.error(err);
        }
    }
});

// Inicializar estilos quando o DOM carregar
document.addEventListener('DOMContentLoaded', addGlobalStyles);

// Exportar estado global para debugging
if (typeof window !== 'undefined') {
    window.AppState = AppState;
}

// Limpar recursos quando a p√°gina for descarregada
window.addEventListener('beforeunload', () => {
    console.log('[app.js] üßπ Limpando recursos antes de descarregar...');
    
    try {
        integrationService.cleanup();
    } catch (error) {
        console.warn('[app.js] Erro ao limpar recursos:', error);
    }
});

console.log('[app.js] üì¶ M√≥dulo app.js carregado - VERS√ÉO LIMPA!');