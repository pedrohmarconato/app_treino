/**
 * üÜï SISTEMA DE CADASTRO - INTEGRA√á√ÉO GLOBAL
 *
 * Script para carregar e disponibilizar o sistema de cadastro
 * de forma compat√≠vel com o projeto existente.
 */

// Mock trackEvent para compatibilidade
if (!window.trackEvent) {
  window.trackEvent = function (event, data) {
    console.log(`üìä [trackEvent] ${event}`, data);
  };
}

// Fun√ß√£o para carregar o sistema de cadastro
async function loadCadastroSystem() {
  console.log('[cadastroSystem] üîß Carregando sistema de cadastro...');

  try {
    console.log('[cadastroSystem] üì¶ Importando m√≥dulos...');

    // Carregar m√≥dulos ES6 dinamicamente
    console.log('[cadastroSystem] 1/3 - Carregando userRegistrationService...');
    const registrationModule = await import('../services/userRegistrationService.js');
    console.log(
      '[cadastroSystem] ‚úÖ userRegistrationService carregado:',
      !!registrationModule.cadastrarNovoUsuario
    );

    console.log('[cadastroSystem] 2/3 - Carregando userValidationService...');
    const validationModule = await import('../services/userValidationService.js');
    console.log(
      '[cadastroSystem] ‚úÖ userValidationService carregado:',
      !!validationModule.validateUserData
    );

    console.log('[cadastroSystem] 3/3 - Carregando CadastroUsuarioModal...');
    const modalModule = await import('../components/CadastroUsuarioModal.js');
    console.log('[cadastroSystem] ‚úÖ CadastroUsuarioModal carregado:', !!modalModule.default);

    const { cadastrarNovoUsuario } = registrationModule;

    const { validateUserData, checkRateLimit, resetRateLimit, logLGPDConsent } = validationModule;

    const CadastroUsuarioModal = modalModule.default;

    // Disponibilizar globalmente
    window.CadastroSystem = {
      cadastrarNovoUsuario,
      validateUserData,
      checkRateLimit,
      resetRateLimit,
      logLGPDConsent,
      CadastroUsuarioModal,
    };

    console.log('[cadastroSystem] ‚úÖ Sistema carregado com sucesso');
    return true;
  } catch (error) {
    console.error('[cadastroSystem] ‚ùå Erro ao carregar sistema:', error);
    return false;
  }
}

// Fun√ß√£o para abrir question√°rio de usu√°rio
async function abrirQuestionarioUsuario(usuario) {
  console.log('[abrirQuestionarioUsuario] üìã Iniciando question√°rio para:', usuario.nome);

  try {
    // Carregar modal do question√°rio
    console.log('[abrirQuestionarioUsuario] üì¶ Carregando QuestionnaireModal...');
    const { default: QuestionnaireModal } = await import('../components/QuestionnaireModal.js');

    // Carregar CSS do question√°rio
    const linkExists = document.getElementById('questionnaire-styles');
    if (!linkExists) {
      const link = document.createElement('link');
      link.id = 'questionnaire-styles';
      link.rel = 'stylesheet';
      link.href = './css/questionnaire-modal.css';
      document.head.appendChild(link);

      // Aguardar CSS carregar
      await new Promise((resolve) => {
        link.onload = resolve;
        setTimeout(resolve, 100); // fallback
      });
    }

    console.log('[abrirQuestionarioUsuario] ‚úÖ QuestionnaireModal carregado');

    // Criar inst√¢ncia do modal
    const modal = new QuestionnaireModal();
    console.log('[abrirQuestionarioUsuario] üöÄ Abrindo question√°rio...');

    // Mostrar question√°rio
    const resultado = await modal.show(usuario);

    if (resultado) {
      console.log('[abrirQuestionarioUsuario] ‚úÖ Question√°rio conclu√≠do:', Object.keys(resultado));

      // Salvar dados do question√°rio no banco
      try {
        console.log('[abrirQuestionarioUsuario] üíæ Salvando question√°rio no banco...');
        const { salvarQuestionario } = await import('../services/questionnaireService.js');

        const resultadoSalvar = await salvarQuestionario(resultado);

        if (resultadoSalvar.success) {
          console.log('[abrirQuestionarioUsuario] ‚úÖ Question√°rio salvo com sucesso no banco');
        } else {
          console.error(
            '[abrirQuestionarioUsuario] ‚ùå Erro ao salvar question√°rio:',
            resultadoSalvar.error
          );
        }
      } catch (saveError) {
        console.error('[abrirQuestionarioUsuario] ‚ùå Erro no servi√ßo de question√°rio:', saveError);
      }

      return resultado;
    } else {
      console.log('[abrirQuestionarioUsuario] ‚ÑπÔ∏è Question√°rio cancelado');
      return null;
    }
  } catch (error) {
    console.error('[abrirQuestionarioUsuario] ‚ùå Erro:', error);
    throw error;
  }
}

// Fun√ß√£o para abrir modal de cadastro (compat√≠vel com o projeto)
window.abrirModalCadastro = async function (e) {
  // Evitar que o clique que abriu o modal se propague e feche-o imediatamente
  if (e && e.stopPropagation) {
    e.stopPropagation();
    if (e.stopImmediatePropagation) e.stopImmediatePropagation();
    if (e.preventDefault) e.preventDefault();
  }

  console.log('[abrirModalCadastro] üöÄ Iniciando...');

  try {
    // Garantir que o sistema est√° carregado
    if (!window.CadastroSystem) {
      console.log('[abrirModalCadastro] Sistema n√£o carregado, carregando...');
      const loaded = await loadCadastroSystem();
      if (!loaded) {
        throw new Error('Falha ao carregar sistema de cadastro');
      }
    }

    console.log('[abrirModalCadastro] üìã Criando inst√¢ncia do modal...');
    console.log('[abrirModalCadastro] üîç CadastroSystem dispon√≠vel:', !!window.CadastroSystem);
    console.log(
      '[abrirModalCadastro] üîç CadastroUsuarioModal dispon√≠vel:',
      !!window.CadastroSystem.CadastroUsuarioModal
    );
    console.log('[abrirModalCadastro] üîç Corpo do documento:', !!document.body);
    console.log(
      '[abrirModalCadastro] üîç Modal existente no DOM:',
      !!document.getElementById('cadastro-modal-overlay')
    );

    // Blindagem contra fechamento imediato: marcar timestamp do clique
    window.__lastLoginActionAt = Date.now();

    const modal = new window.CadastroSystem.CadastroUsuarioModal();
    console.log('[abrirModalCadastro] ‚úÖ Modal instanciado:', !!modal);
    console.log('[abrirModalCadastro] ‚úÖ M√©todo show dispon√≠vel:', typeof modal.show);
    console.log('[abrirModalCadastro] üöÄ Chamando show()...');

    // Verificar se a fun√ß√£o show existe
    if (typeof modal.show !== 'function') {
      throw new Error('Modal n√£o possui m√©todo show()');
    }

    // Monitorar quando o modal √© adicionado/removido do DOM
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1 && node.id === 'cadastro-modal-overlay') {
            console.log('[abrirModalCadastro] ‚úÖ Modal ADICIONADO ao DOM');
          }
        });
        mutation.removedNodes.forEach((node) => {
          if (node.nodeType === 1 && node.id === 'cadastro-modal-overlay') {
            console.log('[abrirModalCadastro] ‚ö†Ô∏è Modal REMOVIDO do DOM');
          }
        });
      });
    });

    observer.observe(document.body, { childList: true, subtree: true });

    const resultado = await modal.show();
    observer.disconnect();

    console.log('[abrirModalCadastro] üéØ Modal finalizado com resultado:', resultado);

    if (resultado) {
      console.log('[abrirModalCadastro] ‚úÖ Usu√°rio cadastrado:', resultado.nome);

      // Notifica√ß√£o de sucesso
      if (window.showNotification) {
        window.showNotification(`Usu√°rio ${resultado.nome} cadastrado com sucesso!`, 'success');
      }

      // üÜï ABRIR QUESTION√ÅRIO AP√ìS CADASTRO
      try {
        console.log('[abrirModalCadastro] üìã Abrindo question√°rio para novo usu√°rio...');
        const questionarioResultado = await abrirQuestionarioUsuario(resultado);

        if (questionarioResultado) {
          console.log('[abrirModalCadastro] ‚úÖ Question√°rio preenchido com sucesso');
          if (window.showNotification) {
            window.showNotification('Perfil criado! Bem-vindo ao app!', 'success');
          }

          // Definir usu√°rio atual e redirecionar para home
          if (window.AppState) {
            window.AppState.set('currentUser', resultado);
          }

          // Redirecionar para home ap√≥s question√°rio
          setTimeout(() => {
            if (window.renderTemplate) {
              window.renderTemplate('home');
            }
          }, 1500);
        } else {
          console.log('[abrirModalCadastro] ‚ÑπÔ∏è Question√°rio pulado pelo usu√°rio');
          if (window.showNotification) {
            window.showNotification(
              'Cadastro conclu√≠do! Voc√™ pode preencher seu perfil depois.',
              'info'
            );
          }
        }
      } catch (questionarioError) {
        console.error('[abrirModalCadastro] ‚ùå Erro no question√°rio:', questionarioError);
        if (window.showNotification) {
          window.showNotification(
            'Usu√°rio cadastrado, mas question√°rio n√£o p√¥de ser aberto.',
            'warning'
          );
        }
      }
      return null;
    }
  } catch (error) {
    console.error('[abrirModalCadastro] ‚ùå Erro:', error);
    console.error('[abrirModalCadastro] ‚ùå Stack:', error.stack);

    if (window.showNotification) {
      window.showNotification('Erro ao abrir cadastro de usu√°rio', 'error');
    } else {
      alert('Erro ao abrir cadastro de usu√°rio: ' + error.message);
    }

    return null;
  }
};

// Fun√ß√£o para teste do sistema
window.testarSistemaCadastro = async function () {
  console.log('[testarSistemaCadastro] üß™ Iniciando testes...');

  try {
    const loaded = await loadCadastroSystem();
    if (!loaded) {
      console.error('[testarSistemaCadastro] ‚ùå Falha ao carregar sistema');
      return;
    }

    console.log('[testarSistemaCadastro] ‚úÖ Sistema carregado');
    console.log(
      '[testarSistemaCadastro] üéØ Fun√ß√µes dispon√≠veis:',
      Object.keys(window.CadastroSystem)
    );

    // Testar valida√ß√£o
    console.log('[testarSistemaCadastro] üîç Testando valida√ß√£o...');
    try {
      await window.CadastroSystem.validateUserData({
        nome: 'Teste',
        email: 'teste@exemplo.com',
      });
      console.log('[testarSistemaCadastro] ‚úÖ Valida√ß√£o OK');
    } catch (validationError) {
      console.log('[testarSistemaCadastro] ‚úÖ Valida√ß√£o funcionando (erro esperado)');
    }

    // Testar rate limit
    console.log('[testarSistemaCadastro] üö¶ Testando rate limit...');
    const canProceed = await window.CadastroSystem.checkRateLimit();
    console.log('[testarSistemaCadastro] ‚úÖ Rate limit:', canProceed ? 'OK' : 'Bloqueado');

    console.log('[testarSistemaCadastro] üéâ Todos os testes conclu√≠dos');
  } catch (error) {
    console.error('[testarSistemaCadastro] ‚ùå Erro nos testes:', error);
  }
};

// Disponibilizar fun√ß√£o de question√°rio globalmente
window.abrirQuestionarioUsuario = abrirQuestionarioUsuario;

// Auto-carregar o sistema quando o script for carregado
console.log('[cadastroSystem] üöÄ Script carregado, inicializando...');
loadCadastroSystem().then((success) => {
  if (success) {
    console.log('[cadastroSystem] üéâ Sistema de cadastro pronto para uso!');
    console.log('[cadastroSystem] üí° Use abrirModalCadastro() para abrir o modal');
    console.log(
      '[cadastroSystem] üìã Use abrirQuestionarioUsuario(usuario) para abrir question√°rio'
    );
    console.log('[cadastroSystem] üß™ Use testarSistemaCadastro() para executar testes');
  }
});

// Exportar para uso em outros m√≥dulos se necess√°rio
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { loadCadastroSystem };
}
