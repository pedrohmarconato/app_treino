/**
 * ‚öôÔ∏è CONFIGURA√á√ïES DA APLICA√á√ÉO - Config
 *
 * FUN√á√ÉO: Centralizar todas as configura√ß√µes e credenciais da aplica√ß√£o.
 *
 * RESPONSABILIDADES:
 * - Definir credenciais do Supabase (URL e chave an√¥nima)
 * - Configurar URLs de API e endpoints externos
 * - Definir constantes da aplica√ß√£o (timeouts, limites, etc.)
 * - Organizar configura√ß√µes por ambiente (dev, prod)
 * - Expor configura√ß√µes globalmente via window object
 *
 * CONFIGURA√á√ïES INCLU√çDAS:
 * - SUPABASE_CONFIG: URL e chave para conex√£o com banco
 * - API_TIMEOUTS: Tempos limite para requisi√ß√µes
 * - CACHE_CONFIG: Configura√ß√µes de cache local
 * - SYNC_CONFIG: Configura√ß√µes de sincroniza√ß√£o offline
 *
 * SEGURAN√áA:
 * - Arquivo n√£o deve ser versionado no git (.gitignore)
 * - Chaves expostas s√£o apenas an√¥nimas (public keys)
 * - Credenciais sens√≠veis ficam no servidor/ambiente
 *
 * IMPORTANTE: As chaves aqui s√£o p√∫blicas (client-side), autentica√ß√£o real
 * √© feita via RLS (Row Level Security) no Supabase.
 */

// N√ÉO versionar este arquivo!
window.SUPABASE_CONFIG = {
  url: 'https://ktfmktecvllyiqfkavdn.supabase.co',
  key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt0Zm1rdGVjdmxseWlxZmthdmRuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwNDQ2OTAsImV4cCI6MjA2MzYyMDY5MH0.PgEnBgtdITsb_G_ycSOaXOmkwNfpvIWVOOAsVrm2zCY',
};

// Inicializar cliente Supabase assim que o script carregar
if (typeof window !== 'undefined' && window.supabase && window.SUPABASE_CONFIG) {
  console.log('[config.js] üîß Inicializando cliente Supabase...');

  try {
    // Verificar se createClient existe
    if (typeof window.supabase.createClient === 'function') {
      // Criar cliente Supabase e armazenar em vari√°vel diferente
      window.supabaseClient = window.supabase.createClient(
        window.SUPABASE_CONFIG.url,
        window.SUPABASE_CONFIG.key
      );
    } else if (typeof window.createClient === 'function') {
      // Tentar createClient direto no window
      window.supabaseClient = window.createClient(
        window.SUPABASE_CONFIG.url,
        window.SUPABASE_CONFIG.key
      );
    } else {
      console.warn('[config.js] ‚ö†Ô∏è createClient n√£o encontrado, mantendo supabase original');
    }

    console.log('[config.js] ‚úÖ Cliente Supabase inicializado com sucesso');

    // Testar conex√£o b√°sica
    const clientToTest = window.supabaseClient || window.supabase;
    if (clientToTest && typeof clientToTest.from === 'function') {
      clientToTest
        .from('usuarios')
        .select('count')
        .limit(1)
        .then((result) => {
          if (result.error) {
            console.warn('[config.js] ‚ö†Ô∏è Teste de conex√£o falhou:', result.error.message);
          } else {
            console.log('[config.js] ‚úÖ Conex√£o com banco confirmada');
          }
        })
        .catch((error) => {
          console.warn('[config.js] ‚ö†Ô∏è Erro no teste de conex√£o:', error.message);
        });
    }
  } catch (error) {
    console.error('[config.js] ‚ùå Erro ao inicializar Supabase:', error);
  }
} else {
  console.warn('[config.js] ‚ö†Ô∏è Supabase library n√£o encontrada ou configura√ß√£o inv√°lida');
}
