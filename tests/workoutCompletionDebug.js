/**
 * üîß DEBUG E TESTE DA FINALIZA√á√ÉO DE TREINO
 * 
 * Ferramentas para diagnosticar e testar o sistema de finaliza√ß√£o
 */

/**
 * Fun√ß√£o principal de debug
 */
window.debugWorkoutCompletion = async function() {
    console.log('üîß === INICIANDO DEBUG DE FINALIZA√á√ÉO ===');
    
    try {
        // 1. Importar servi√ßo
        const { WorkoutCompletionService } = await import('../services/workoutCompletionService.js');
        
        // 2. Executar diagn√≥stico
        await WorkoutCompletionService.diagnosticarEstadoTreino();
        
        // 3. Verificar dados necess√°rios
        const currentUser = AppState?.get('currentUser');
        const execucoesCache = AppState?.get('execucoesCache') || [];
        
        if (!currentUser) {
            console.error('‚ùå PROBLEMA CR√çTICO: Usu√°rio n√£o encontrado no AppState');
            console.log('üí° Solu√ß√µes:');
            console.log('   1. Fazer login novamente');
            console.log('   2. Verificar se AppState.set("currentUser", user) foi chamado');
            return false;
        }
        
        if (execucoesCache.length === 0) {
            console.error('‚ùå PROBLEMA: Nenhuma execu√ß√£o encontrada no cache');
            console.log('üí° Solu√ß√µes:');
            console.log('   1. Executar pelo menos uma s√©rie de exerc√≠cio');
            console.log('   2. Verificar se AppState.set("execucoesCache", [...]) est√° funcionando');
            return false;
        }
        
        // 4. Testar salvamento individual
        console.log('üß™ Testando salvamento de uma execu√ß√£o...');
        const primeiraExecucao = execucoesCache[0];
        console.log('Dados da primeira execu√ß√£o:', primeiraExecucao);
        
        // 5. Verificar conex√£o com Supabase
        console.log('üóÑÔ∏è Testando conex√£o com Supabase...');
        try {
            const { supabase } = await import('../services/supabaseService.js');
            const { data, error } = await supabase.from('usuarios').select('id').eq('id', currentUser.id).single();
            
            if (error) {
                console.error('‚ùå Erro na consulta Supabase:', error);
                return false;
            } else {
                console.log('‚úÖ Conex√£o Supabase OK');
            }
        } catch (error) {
            console.error('‚ùå Erro ao importar Supabase:', error);
            return false;
        }
        
        console.log('‚úÖ Debug conclu√≠do - sistema parece estar funcionando');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro no debug:', error);
        return false;
    }
};

/**
 * Testar finaliza√ß√£o simulada
 */
window.testWorkoutCompletion = async function() {
    console.log('üß™ === TESTE DE FINALIZA√á√ÉO SIMULADA ===');
    
    try {
        // Verificar se h√° dados para testar
        const execucoesCache = AppState?.get('execucoesCache') || [];
        const currentUser = AppState?.get('currentUser');
        
        if (!currentUser || execucoesCache.length === 0) {
            console.error('‚ùå N√£o h√° dados suficientes para testar');
            console.log('Use debugWorkoutCompletion() primeiro');
            return false;
        }
        
        // Importar e executar
        const { WorkoutCompletionService } = await import('../services/workoutCompletionService.js');
        
        console.log('üöÄ Iniciando teste de finaliza√ß√£o...');
        const resultado = await WorkoutCompletionService.finalizarTreino({
            teste: true,
            observacoes: 'Teste de debug'
        });
        
        console.log('üìä Resultado do teste:', resultado);
        
        if (resultado.sucesso) {
            console.log('‚úÖ TESTE PASSOU - Finaliza√ß√£o funcionando!');
        } else {
            console.log('‚ö†Ô∏è TESTE FALHOU - Verificar erros acima');
        }
        
        return resultado.sucesso;
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        return false;
    }
};

/**
 * Simular dados de treino para teste
 */
window.simularDadosTreino = function() {
    console.log('üé≠ Simulando dados de treino...');
    
    // Simular usu√°rio
    const usuarioTeste = {
        id: 1,
        nome: 'Teste',
        email: 'teste@teste.com'
    };
    
    // Simular execu√ß√µes
    const execucoesTeste = [
        {
            exercicio_id: 1,
            exercicio_nome: 'Supino',
            peso_utilizado: 80,
            repeticoes_realizadas: 10,
            series_numero: 1,
            usuario_id: 1,
            created_at: new Date().toISOString()
        },
        {
            exercicio_id: 1,
            exercicio_nome: 'Supino',
            peso_utilizado: 80,
            repeticoes_realizadas: 8,
            series_numero: 2,
            usuario_id: 1,
            created_at: new Date().toISOString()
        },
        {
            exercicio_id: 2,
            exercicio_nome: 'Leg Press',
            peso_utilizado: 120,
            repeticoes_realizadas: 12,
            series_numero: 1,
            usuario_id: 1,
            created_at: new Date().toISOString()
        }
    ];
    
    // Simular treino atual
    const treinoTeste = {
        id: 1,
        grupo_muscular: 'Peito',
        tipo_atividade: 'Treino',
        protocolo_id: 1
    };
    
    // Definir no AppState
    if (window.AppState) {
        AppState.set('currentUser', usuarioTeste);
        AppState.set('execucoesCache', execucoesTeste);
        AppState.set('currentWorkout', treinoTeste);
        AppState.set('workoutStartTime', Date.now() - (30 * 60 * 1000)); // 30 min atr√°s
        
        console.log('‚úÖ Dados simulados definidos no AppState');
        console.log('üìä Execu√ß√µes simuladas:', execucoesTeste.length);
        console.log('üë§ Usu√°rio:', usuarioTeste.nome);
        console.log('üí™ Treino:', treinoTeste.grupo_muscular);
        
        return true;
    } else {
        console.error('‚ùå AppState n√£o encontrado');
        return false;
    }
};

/**
 * Limpar dados de teste
 */
window.limparDadosTeste = function() {
    console.log('üßπ Limpando dados de teste...');
    
    if (window.AppState) {
        AppState.set('currentUser', null);
        AppState.set('execucoesCache', []);
        AppState.set('currentWorkout', null);
        AppState.set('workoutStartTime', null);
        
        console.log('‚úÖ Dados limpos do AppState');
    }
    
    // Limpar localStorage de debug
    localStorage.removeItem('workout_completion_state');
    localStorage.removeItem('workout_error_state');
    
    console.log('‚úÖ LocalStorage limpo');
};

/**
 * Verificar recovery
 */
window.checkWorkoutRecovery = async function() {
    console.log('üîÑ Verificando recovery...');
    
    try {
        const { WorkoutCompletionService } = await import('../services/workoutCompletionService.js');
        const recovery = await WorkoutCompletionService.verificarRecoveryPendente();
        
        if (recovery) {
            console.log('üìã Recovery encontrado:', recovery);
        } else {
            console.log('‚úÖ Nenhum recovery pendente');
        }
        
        return recovery;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar recovery:', error);
        return null;
    }
};

/**
 * Mostrar modal de sucesso de teste
 */
window.testSuccessModal = async function() {
    console.log('üéâ Testando modal de sucesso...');
    
    try {
        const { WorkoutSuccessModal } = await import('../components/workoutSuccessModal.js');
        
        const dadosTeste = {
            tempo_total_minutos: 45,
            total_series: 12,
            peso_total_levantado: 1250.5,
            repeticoes_totais: 96,
            exercicios_unicos: 4,
            grupo_muscular: 'Peito'
        };
        
        await WorkoutSuccessModal.mostrar(dadosTeste);
        console.log('‚úÖ Modal de sucesso exibido');
        
    } catch (error) {
        console.error('‚ùå Erro ao testar modal:', error);
    }
};

// Mensagem de carregamento
console.log('üîß Debug tools carregadas!');
console.log('üìã Fun√ß√µes dispon√≠veis:');
console.log('  ‚Ä¢ debugWorkoutCompletion() - Diagn√≥stico completo');
console.log('  ‚Ä¢ testWorkoutCompletion() - Teste de finaliza√ß√£o');
console.log('  ‚Ä¢ simularDadosTreino() - Simular dados para teste');
console.log('  ‚Ä¢ limparDadosTeste() - Limpar dados simulados');
console.log('  ‚Ä¢ checkWorkoutRecovery() - Verificar recovery');
console.log('  ‚Ä¢ testSuccessModal() - Testar modal de sucesso');

export default {
    debugWorkoutCompletion: window.debugWorkoutCompletion,
    testWorkoutCompletion: window.testWorkoutCompletion,
    simularDadosTreino: window.simularDadosTreino,
    limparDadosTeste: window.limparDadosTeste,
    checkWorkoutRecovery: window.checkWorkoutRecovery,
    testSuccessModal: window.testSuccessModal
};