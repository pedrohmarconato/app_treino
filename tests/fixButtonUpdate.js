/**
 * Fix para for√ßar atualiza√ß√£o do bot√£o contextual
 */

async function fixButtonUpdate() {
    console.log('üîß Aplicando fix para atualiza√ß√£o do bot√£o...');
    
    // 1. Disparar evento de atualiza√ß√£o de cache
    window.dispatchEvent(new CustomEvent('workout-cache-updated', {
        detail: { 
            hasCache: true,
            timestamp: Date.now()
        }
    }));
    
    // 2. Notificar via AppState se dispon√≠vel
    if (window.AppState?.set) {
        window.AppState.set('workoutCacheUpdated', Date.now());
    }
    
    // 3. For√ßar atualiza√ß√£o do bot√£o se existir inst√¢ncia
    if (window.contextualWorkoutButton?.forceUpdate) {
        await window.contextualWorkoutButton.forceUpdate();
        console.log('‚úÖ forceUpdate executado');
    }
    
    // 4. Se n√£o houver inst√¢ncia, tentar criar uma nova
    const button = document.querySelector('#contextual-workout-btn');
    if (button && !window.contextualWorkoutButton) {
        if (window.ContextualWorkoutButton) {
            window.contextualWorkoutButton = new window.ContextualWorkoutButton(button);
            console.log('‚úÖ Nova inst√¢ncia do bot√£o criada');
        }
    }
    
    // 5. Aguardar e verificar
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const finalState = button?.getAttribute('data-state');
    const finalText = button?.innerText;
    
    console.log('üìä Estado final do bot√£o:', {
        state: finalState,
        text: finalText,
        hasResumeText: finalText?.includes('Voltar')
    });
    
    return finalState === 'resume';
}

// Fun√ß√£o para debug completo do bot√£o
function debugButton() {
    const button = document.querySelector('#contextual-workout-btn');
    
    if (!button) {
        console.log('‚ùå Bot√£o n√£o encontrado');
        return;
    }
    
    console.log('üîç Debug do Bot√£o Contextual:');
    console.log('============================');
    
    // Atributos
    console.log('Atributos:', {
        id: button.id,
        'data-state': button.getAttribute('data-state'),
        'data-action': button.getAttribute('data-action'),
        disabled: button.disabled,
        className: button.className
    });
    
    // Conte√∫do
    console.log('Conte√∫do:', {
        text: button.innerText,
        html: button.innerHTML.substring(0, 100) + '...'
    });
    
    // Inst√¢ncia
    console.log('Inst√¢ncia:', {
        hasGlobalInstance: !!window.contextualWorkoutButton,
        hasConstructor: !!window.ContextualWorkoutButton
    });
    
    // Cache
    if (window.TreinoCacheService || window.workoutPersistence) {
        const service = window.TreinoCacheService || window.workoutPersistence;
        service.getWorkoutState().then(state => {
            console.log('Estado do cache:', {
                hasState: !!state,
                exerciciosExecutados: state?.exerciciosExecutados?.length || 0
            });
        });
    }
}

// Auto-executar fix
(async function() {
    console.log('üöÄ Iniciando fix autom√°tico do bot√£o...');
    const success = await fixButtonUpdate();
    
    if (success) {
        console.log('‚úÖ Bot√£o atualizado com sucesso!');
    } else {
        console.log('‚ö†Ô∏è Bot√£o pode precisar de atualiza√ß√£o manual');
        console.log('Execute: debugButton() para mais informa√ß√µes');
    }
})();

// Exportar fun√ß√µes
window.fixButtonUpdate = fixButtonUpdate;
window.debugButton = debugButton;